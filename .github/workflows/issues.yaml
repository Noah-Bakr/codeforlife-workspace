name: Issues

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created, edited]
  # schedule:
  #   - cron: "0 9 * * 1-5" # Every weekday at 9am UTC.
  push:
    branches: [main]
    paths:
      - .github/workflows/issues.yaml
  workflow_call:
    secrets:
      CFL_BOT_GH_TOKEN:
        description: "The CFL-bot's GitHub token. Used to comment."
        required: false

jobs:
  opened:
    runs-on: ubuntu-22.04
    if: |
      github.repository_owner_id == 2088731 &&
      github.event_name == 'issue' &&
      github.event.action == 'opened'
    env:
      GH_TOKEN: ${{ secrets.CFL_BOT_GH_TOKEN }}
    steps:
      - name: ‚úçÔ∏è Download and Write Was-Opened Comment
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: was-opened.md

  comment-created-or-edited:
    runs-on: ubuntu-22.04
    if: |
      github.repository_owner_id == 2088731 &&
      github.event_name == 'issue_comment' &&
      !github.event.issue.pull_request &&
      contains(fromJSON('["created", "edited"]'), github.event.action)
    env:
      GH_TOKEN: ${{ secrets.CFL_BOT_GH_TOKEN }}
      # Prompts
      ASSIGN_ME_PROMPT: "+"
      UNASSIGN_ME_PROMPT: "-"
      READY_FOR_REVIEW_PROMPT: "!"
      READY_FOR_REVIEW_LABEL: "ready for review"
      REQUIRES_CHANGES_PROMPT: "?"
      # Common Conditions
      COMMENTER_IS_ASSIGNED: ${{ contains(github.event.issue.assignees.*.id, github.event.comment.user.id) }}
      IS_OPEN: ${{ github.event.issue.state == 'open' }}
    steps:
      - name: üîç Extract Prompt
        id: _ # Shorthand
        run: |
          comment_body=$(
            echo "${{ github.event.comment.body }}" |
            sed --regexp-extended '
              s/^@cfl-bot +| +@cfl-bot$//g;
              s/ +@cfl-bot +/ /g;
              s/@cfl-bot//g;
              s/^[[:space:]]*|[[:space:]]*$//g;
              s/[[:space:]]{2,}/ /g
            ' |
            tr '[:upper:]' '[:lower:]'
          )

          prompt_aliases=(
            "assign me=${{ env.ASSIGN_ME_PROMPT }}"
            "unassign me=${{ env.UNASSIGN_ME_PROMPT }}"
            "ready for review=${{ env.READY_FOR_REVIEW_PROMPT }}"
            "requires changes=${{ env.REQUIRES_CHANGES_PROMPT }}"
          )
          prompt=""
          for prompt_alias in "${prompt_aliases[@]}"; do
            text="${prompt_alias%=*}"
            symbol="${prompt_alias#*=}"
            if [ "$comment_body" = "$text" ] || [ "$comment_body" = "$symbol" ]; then
              prompt="$symbol"
              break
            fi
          done

          function set_output() { echo "$1=$2" >> $GITHUB_OUTPUT; }

          set_output "prompt" "$prompt"

          if [ -z "$prompt" ]; then exit 0; fi

          if [ "$prompt" = "${{ env.ASSIGN_ME_PROMPT }}" ]; then
            set_output "max-assignees" "${{ github.event.issue.assignees.length >= 5 }}"
          fi
          if [ "$prompt" = "${{ env.READY_FOR_REVIEW_PROMPT }}" ] || [ "$prompt" = "${{ env.REQUIRES_CHANGES_PROMPT }}" ]; then
            set_output "has-label" "${{ contains(github.event.issue.labels.*.name, env.READY_FOR_REVIEW_LABEL)  }}"
          fi

      # assign me

      - name: "‚úçÔ∏è Assign Me: Download and Write Closed-State Comment"
        id: assign-me-closed-state
        if: |
          steps._.outputs.prompt == env.ASSIGN_ME_PROMPT &&
          env.IS_OPEN == 'false'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/assign-me/closed-state.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "‚úçÔ∏è Assign Me: Download and Write Already-Assigned Comment"
        id: assign-me-already-assigned
        if: |
          steps._.outputs.prompt == env.ASSIGN_ME_PROMPT &&
          env.IS_OPEN == 'true' &&
          env.COMMENTER_IS_ASSIGNED == 'true'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/assign-me/already-assigned.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "‚úçÔ∏è Assign Me: Download and Write Max-Assignees Comment"
        id: assign-me-max-assignees
        if: |
          steps._.outputs.prompt == env.ASSIGN_ME_PROMPT &&
          env.IS_OPEN == 'true' &&
          env.COMMENTER_IS_ASSIGNED == 'false' &&
          steps._.outputs.max-assignees == 'true'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/assign-me/max-assignees.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "üèÉ Assign Me: Run"
        if: |
          steps._.outputs.prompt == env.ASSIGN_ME_PROMPT &&
          steps.assign-me-already-assigned.conclusion == 'skipped' &&
          steps.assign-me-closed-state.conclusion == 'skipped' &&
          steps.assign-me-max-assignees.conclusion == 'skipped'
        run: |
          gh api graphql -f query='
            mutation {
              addAssignee: addAssigneesToAssignable(input: {
                assignableId: "${{ github.event.issue.node_id }}"
                assigneeIds: ["${{ github.event.comment.user.node_id }}"]
              }) {
                assignable { ... on Issue { id } }
              }
            }'

      # unassign me

      - name: "‚úçÔ∏è Unassign Me: Download and Write Not-Assigned Comment"
        id: unassign-me-not-assigned
        if: |
          steps._.outputs.prompt == env.UNASSIGN_ME_PROMPT &&
          env.COMMENTER_IS_ASSIGNED == 'false'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/unassign-me/not-assigned.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "üèÉ Unassign Me: Run"
        if: |
          steps._.outputs.prompt == env.UNASSIGN_ME_PROMPT &&
          steps.unassign-me-not-assigned.conclusion == 'skipped'
        run: |
          gh api graphql -f query='
            mutation {
              removeAssignee: removeAssigneesFromAssignable(input: {
                assignableId: "${{ github.event.issue.node_id }}"
                assigneeIds: ["${{ github.event.comment.user.node_id }}"]
              }) {
                assignable { ... on Issue { id } }
              }
            }'

      # ready for review

      - name: "‚úçÔ∏è Ready for Review: Download and Write Closed-State Comment"
        id: ready-for-review-closed-state
        if: |
          steps._.outputs.prompt == env.READY_FOR_REVIEW_PROMPT &&
          env.IS_OPEN == 'false'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/ready-for-review/closed-state.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "‚úçÔ∏è Ready for Review: Download and Write Not-Assigned Comment"
        id: ready-for-review-not-assigned
        if: |
          steps._.outputs.prompt == env.READY_FOR_REVIEW_PROMPT &&
          env.IS_OPEN == 'true' &&
          env.COMMENTER_IS_ASSIGNED == 'false'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/ready-for-review/not-assigned.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "‚úçÔ∏è Ready for Review: Download and Write Already-Labelled Comment"
        id: ready-for-review-already-labelled
        if: |
          steps._.outputs.prompt == env.READY_FOR_REVIEW_PROMPT &&
          env.IS_OPEN == 'true' &&
          env.COMMENTER_IS_ASSIGNED == 'true' &&
          steps._.outputs.has-label == 'true'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/ready-for-review/already-labelled.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "üèÉ Ready for Review: Run"
        if: |
          steps._.outputs.prompt == env.READY_FOR_REVIEW_PROMPT &&
          steps.ready-for-review-closed-state.conclusion == 'skipped' &&
          steps.ready-for-review-not-assigned.conclusion == 'skipped' &&
          steps.ready-for-review-already-labelled.conclusion == 'skipped'
        run: |
          gh label create "${{ env.READY_FOR_REVIEW_PROMPT }}" \
            --repo=${{ github.repository }} \
            --force \
            --color="#fbca04" \
            --description="This issue is awaiting review by a CFL team member."

          gh issue edit ${{ github.event.issue.number }} \
            --repo=${{ github.repository }} \
            --add-label="${{ env.READY_FOR_REVIEW_LABEL }}"

      # requires changes

      - name: "‚úçÔ∏è Requires Changes: Download and Write Closed-State Comment"
        id: requires-changes-closed-state
        if: |
          steps._.outputs.prompt == env.REQUIRES_CHANGES_PROMPT &&
          env.IS_OPEN == 'false'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/requires-changes/closed-state.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "‚úçÔ∏è Requires Changes: Download and Write Not-Assigned Comment"
        id: requires-changes-not-assigned
        if: |
          steps._.outputs.prompt == env.REQUIRES_CHANGES_PROMPT &&
          env.IS_OPEN == 'true' &&
          env.COMMENTER_IS_ASSIGNED == 'false'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/requires-changes/not-assigned.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "‚úçÔ∏è Requires Changes: Download and Write Not-Labelled Comment"
        id: requires-changes-not-labelled
        if: |
          steps._.outputs.prompt == env.REQUIRES_CHANGES_PROMPT &&
          env.IS_OPEN == 'true' &&
          env.COMMENTER_IS_ASSIGNED == 'true' &&
          steps._.outputs.has-label == 'false'
        uses: ocadotechnology/codeforlife-workspace/.github/actions/bot/comment-on-issue@main
        with:
          download-issue-comment-path: prompts/requires-changes/not-labelled.md
          write-substitutions: |
            contributor=@${{ github.event.comment.user.login }}

      - name: "üèÉ Requires Changes: Run"
        if: |
          steps._.outputs.prompt == env.REQUIRES_CHANGES_PROMPT &&
          steps.requires-changes-closed-state.conclusion == 'skipped' &&
          steps.requires-changes-not-assigned.conclusion == 'skipped' &&
          steps.requires-changes-not-labelled.conclusion == 'skipped'
        run: |
          gh issue edit ${{ github.event.issue.number }} \
            --repo=${{ github.repository }} \
            --remove-label="${{ env.READY_FOR_REVIEW_LABEL }}"

  inactive:
    runs-on: ubuntu-22.04
    if: |
      github.repository_owner_id == 2088731 &&
      github.event_name == 'push'
    env:
      GH_TOKEN: ${{ secrets.CFL_BOT_GH_TOKEN }}
      ONE_WEEK_MD: 1-week.md
      TWO_WEEKS_MD: 2-weeks.md
      THREE_WEEKS_MD: 3-weeks.md
    steps:
      - name: üì• Download 1-Week Comment
        uses: ocadotechnology/codeforlife-workspace/.github/actions/workspace/download-file@main
        with:
          path: .github/comments/issue/inactive/1-week.md
          save-to: ${{ env.ONE_WEEK_MD }}

      - name: üì• Download 2-Weeks Comment
        uses: ocadotechnology/codeforlife-workspace/.github/actions/workspace/download-file@main
        with:
          path: .github/comments/issue/inactive/2-weeks.md
          save-to: ${{ env.TWO_WEEKS_MD }}

      - name: üì• Download 3-Weeks Comment
        uses: ocadotechnology/codeforlife-workspace/.github/actions/workspace/download-file@main
        with:
          path: .github/comments/issue/inactive/3-weeks.md
          save-to: ${{ env.THREE_WEEKS_MD }}

      - name: ‚öôÔ∏è Process Submodules
        uses: ocadotechnology/codeforlife-workspace/.github/actions/workspace/process-submodules@main
        with:
          pre-processing: names+=("codeforlife-workspace")
          process: |
            repo="ocadotechnology/$1"
            echo "-------------------------------------------------------------"
            echo "Repository: $repo"

            function is_ge_start_and_lt_end_days_old() {
              local d="$1" # date
              local start_days=$2
              local end_days=$3

              if [[ "$start_days" -eq 0 && "$end_days" -eq 0 ]]; then
                echo "Error: The start and end cannot both be unset."
                return 2
              elif [[ 
                "$start_days" -ne 0 &&
                "$end_days" -ne 0 &&
                "$end_days" -gt "$start_days"
              ]]; then
                echo "Error: The end is greater than the start."
                return 3
              fi

              local timestamp=$(TZ="UTC" date --date="$d" +%s)
              local now=$(date +%s)

              if [[ 
                (
                  "$start_days" -eq 0 ||
                  "$timestamp" -ge $((now - (60 * 60 * 24 * start_days)))
                ) && (
                  "$end_days" -eq 0 ||
                  "$timestamp" -lt $((now - (60 * 60 * 24 * end_days)))
                )
              ]]; then return 0; else return 1; fi
            }

            function comment_on_issue() {
              local issue_number="$1"
              local comment_path="$2"

              local substitutions=''
              for substitution in "${@:3}"; do
                local key="${substitution%=*}"
                local value="${substitution#*=}"

                substitutions+='s/{{ *'$key' *}}/'$value'/g;'
              done

              body=$(sed "$substitutions" "$comment_path")
              echo "    Writing comment: \"$body\"."
              # gh issue comment $issue_number --repo=$repo --body=$body
            }

            issues=$(
              gh issue list \
                --repo=$repo \
                --limit=10000 \
                --search="is:open has:assignee" \
                --json=id,number,url,assignees \
                --jq="map(select(.assignees | length > 0))"
            )

            echo "$issues" | jq -c '.[]' | while read -r issue; do
              issue_id=$(echo "$issue" | jq -r '.id')
              issue_number=$(echo "$issue" | jq -r '.number')
              issue_assignees=$(echo "$issue" | jq -r '.assignees')

              echo "  Issue: #$issue_number"

              issue_comments=$(
                gh api \
                  --paginate \
                  --header "Accept: application/vnd.github+json" \
                  "/repos/$repo/issues/$issue_number/comments" \
                  --jq="sort_by(.updated_at)"
              )

              issue_assignees_to_remove=()

              while read -r issue_assignee; do
                issue_assignee_id=$(echo "$issue_assignee" | jq -r '.id')
                issue_assignee_login=$(echo "$issue_assignee" | jq -r '.login')

                last_issue_assignee_comment=$(
                  echo "$issue_comments" |
                    jq -r 'map(select(.user.node_id == "'$issue_assignee_id'")) | last'
                )
                if [ "$last_issue_assignee_comment" = "null" ]; then continue; fi

                last_issue_assignee_comment_update_at=$(
                  echo "$last_issue_assignee_comment" | jq -r '.updated_at'
                )

                if is_ge_start_and_lt_end_days_old "$last_updated_at" 8 7; then
                  comment_on_issue $issue_number "${{ env.ONE_WEEK_MD }}" \
                    "assignee=@$issue_assignee_login"
                elif is_ge_start_and_lt_end_days_old "$last_updated_at" 15 14; then
                  comment_on_issue $issue_number "${{ env.TWO_WEEKS_MD }}" \
                    "assignee=@$issue_assignee_login"
                elif is_ge_start_and_lt_end_days_old "$last_updated_at" 0 21; then
                  comment_on_issue $issue_number "${{ env.THREE_WEEKS_MD }}" \
                    "assignee=@$issue_assignee_login"

                  issue_assignees_to_remove+=("$issue_assignee")
                fi
              done < <(echo "$issue_assignees" | jq -c '.[]')

              if [[ "${#issue_assignees_to_remove[@]}" -gt 0 ]]; then
                issue_assignees_to_remove="[$(
                  IFS=,
                  echo "${issue_assignees_to_remove[*]}"
                )]"

                echo "    Removing assignees: $(
                  echo "$issue_assignees_to_remove" |
                    jq -r 'map(.login) | join(", ")'
                )."

                issue_assignee_ids_to_remove=$(
                  echo "$issue_assignees_to_remove" |
                    jq -r 'map(.id | "\"" + . + "\"") | join(",")'
                )

                # gh api graphql -f query='
                #   mutation {
                #     removeAssignees: removeAssigneesFromAssignable(input: {
                #       assignableId: "'$issue_id'"
                #       assigneeIds: ['$issue_assignee_ids_to_remove']
                #     }) {
                #       assignable { ... on Issue { id } }
                #     }
                #   }'
              fi
            done
